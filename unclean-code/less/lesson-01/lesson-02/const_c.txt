fmt.Println("1.2 Khai báo hằng số")
	fmt.Println("Hằng số là một giá trị không thay đổi trong suốt quá trình thực thi chương trình.")
	fmt.Println("Hằng số được khai báo bằng từ khóa const.")
	fmt.Println("Cú pháp khai báo hằng số:")
	fmt.Println("const tên_hằng số = giá_trị")
	fmt.Println("Ví dụ:")
	fmt.Println("const PI = 3.14")
	const PI = 3.14
	fmt.Println("PI =", PI)
	fmt.Println("")
	fmt.Println("Hằng số có thể được sử dụng để định nghĩa các giá trị không thay đổi trong chương trình, giúp cho mã nguồn dễ đọc và bảo trì hơn.")
	fmt.Println("Hằng số có thể được sử dụng trong các phép toán, điều kiện, và các biểu thức khác giống như biến.")
	fmt.Println("Ví dụ:")
	fmt.Println("const MAX_VALUE = 100")
	const MIN_VALUE = 0
	fmt.Println("MAX_VALUE =", MAX_VALUE)
	fmt.Println("MIN_VALUE =", MIN_VALUE)
	fmt.Println("")
	fmt.Println("Hằng số có thể được khai báo với nhiều kiểu dữ liệu khác nhau, bao gồm int, float64, string, bool.")
	fmt.Println("Ví dụ:")
	fmt.Println("const NAME = \"Golang\"")
	const AGE = 21
	fmt.Println("NAME =", NAME)
	fmt.Println("AGE =", AGE)
	fmt.Println("")
	fmt.Println("Hằng số có thể được khai báo trong phạm vi toàn cục hoặc trong phạm vi hàm.")
	fmt.Println("Ví dụ:")
	fmt.Println("const GLOBAL_CONST = 100")
	const LOCAL_CONST = 200
	fmt.Println("GLOBAL_CONST =", GLOBAL_CONST)
	fmt.Println("LOCAL_CONST =", LOCAL_CONST)
	fmt.Println("")
	fmt.Println("Hằng số có thể được sử dụng trong các biểu thức toán học, điều kiện, và các phép toán khác.")
	fmt.Println("Ví dụ:")
	fmt.Println("const A = 10")
	const B = 20
	fmt.Println("A + B =", A+B)
	fmt.Println("A - B =", A-B)
	fmt.Println("A * B =", A*B)
	fmt.Println("A / B =", A/B)
	fmt.Println("A % B =", A%B)
	fmt.Println("")
	fmt.Println("Hằng số có thể được sử dụng trong các biểu thức điều kiện.")
	fmt.Println("Ví dụ:")
	fmt.Println("if A > B {")
	fmt.Println("    fmt.Println(\"A lớn hơn B\")")
	fmt.Println("} else {")
	fmt.Println("    fmt.Println(\"A nhỏ hơn hoặc bằng B\")")
	fmt.Println("}")
	fmt.Println("Hằng số có thể được sử dụng trong các vòng lặp.")
	fmt.Println("Ví dụ:")
	fmt.Println("for i := 0; i < A; i++ {")
	fmt.Println("    fmt.Println(i)")
	fmt.Println("}")
	fmt.Println("Hằng số có thể được sử dụng trong các hàm.")
	fmt.Println("Ví dụ:")
	fmt.Println("func add(a int, b int) int {")
	fmt.Println("    return a + b")
	fmt.Println("}")
	fmt.Println("result := add(A, B)")
	fmt.Println("fmt.Println(\"Kết quả của phép cộng là:\", result)")
	fmt.Println("Hằng số có thể được sử dụng trong các cấu trúc dữ liệu như mảng, slice, map.")
	fmt.Println("Ví dụ:")
	fmt.Println("const SIZE = 5")
	fmt.Println("var arr [SIZE]int")
	fmt.Println("for i := 0; i < SIZE; i++ {")
	fmt.Println("    arr[i] = i")
	fmt.Println("}")
	fmt.Println("fmt.Println(arr)")
	fmt.Println("Hằng số có thể được sử dụng trong các kiểu dữ liệu tùy chỉnh.")
	fmt.Println("Ví dụ:")
	fmt.Println("type Point struct {")
	fmt.Println("    x int")
	fmt.Println("    y int")
	fmt.Println("}")
	fmt.Println("var p Point")
	fmt.Println("p.x = 10")
	fmt.Println("p.y = 20")
	fmt.Println("fmt.Println(p)")
	fmt.Println("Hằng số có thể được sử dụng trong các kiểu dữ liệu phức tạp như struct, interface.")
	fmt.Println("Ví dụ:")
	fmt.Println("type Person struct {")
	fmt.Println("    name string")
	fmt.Println("    age int")
	fmt.Println("}")
	fmt.Println("var p1 Person")
	fmt.Println("p1.name = \"Golang\"")
	fmt.Println("p1.age = 21")
	fmt.Println("fmt.Println(p1)")
